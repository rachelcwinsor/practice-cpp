Lecture 1.3

- (Command Line) Where to find header files: -I<pathname>
- (Command Line) Look for header files in current directory: -I.

//header files
- Preventing double or circular inclusion:
#ifndef __FILENAME_H
#define __FILENAME_H
/**********************/
/		       /
/**********************/
#endif

Lecture 1.4

compile in emacs shell (option/alt + x) M-x shell

c++ fileName.cpp -o fileName -std=c++14
./fileName to run executable (from the current working directory)


c++ -c fileName.cpp -o fileName.o -std=c++14
c++ fileName.o -o fileName -> separates compiling and linking

c++ -c -g fileName.cpp -o fileName.o -std=c++14
c++ -g fileName.o -o fileName -> add debug information/flags

Lecture 1.5 Namespaces
- Group or entity that are related in some way (related to io, or graphs, etc.)
** option+p (up) and option+n (down) in emacs shell
**ctrl+x+(right arrow key) -> emacs shell to buffer (right arrow key for buffer to shell)

Lecture 1.6 Standard IO
-Streams = objects representing:
	Standard input (cin), Standard output (cout), Standard error (cerr)
	singleton design pattern (there is one copy available when program is created. be careful in multi-threaded environment

Lecture 2.1 String
- built in class for C++ -> replacement for char* in C (array of characters with \0 as final character)
- can hold: constant strings (read only); variable strings (read/write); support lots of operators (size/[]/+,...)
-3 pools: Globals, Stack, Heap
   - declaring a variable -> hosted on the Stack (in Java -> on the Heap by saying string a = new string;) you have the option in C++
   - constructor initializes the stage of the object

printing a frame of ****** around message output

Lecture 2.2 Constness
- Makes an entity Immutable (no risk of accidental change; better than pre-processor macros)
- The notion of being constant
- you cannot use a method or function on an constness object if it has the possibility of being modified

Lecture 2.3 Functions
- call by value -> calling a copy of original, original stays untouched
- const with immutability - using const gives good indication of the nature of a variable

Lecture 2.4 Numeric Types (name[num of bytes])
char[1], short [2], int [4], long [4,8] (it depends on the OS. 32-bit = 4; 64-bit = 8), long long[8]
float[4], double[8] --> density of a floating point decreases as you move away from 0.0
[signed] and [unsigned] variants
bool[1] (same as char) --> true/false

Lecture 2.5 
Arrays and Pointers
(of char)

